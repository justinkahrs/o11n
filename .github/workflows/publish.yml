name: macOS release (manual signing)

on: pull_request         # run on every PR pushed to the repo

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - args: '--target aarch64-apple-darwin'
            arch: 'silicon'

    env:
      RUSTFLAGS: "-C target-cpu=native"

      # ——— signing cert & keychain ———
      APPLE_CERTIFICATE:            ${{ secrets.APPLE_CERTIFICATE }}
      APPLE_CERTIFICATE_PASSWORD:   ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      KEYCHAIN_PASSWORD:            ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_SIGNING_IDENTITY:       ${{ secrets.APPLE_SIGNING_IDENTITY }}

      # ——— notarisation (ASC API key) ———
      APPLE_API_KEY_B64:            ${{ secrets.APPLE_P8_KEY }}
      APPLE_API_KEY_ID:             ${{ secrets.APPLE_API_KEY }}       
      
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY}}
      APPLE_API_ISSUER:             ${{ secrets.APPLE_API_ISSUER }}       # 8-4-4-4-12 UUID

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # ---------- toolchains ----------
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.arch }}
        override: true

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        cache-on-failure: true

    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install Tauri CLI globally
      run: npm install -g @tauri-apps/cli@1

    # ---------- JS deps ----------
    - run: npm ci

    # ---------- import certificate (hardened: no password prompt) ----------
    - name: Import Developer-ID / Apple-Distribution certificate
      run: |
        echo "$APPLE_CERTIFICATE" | base64 --decode > cert.p12

        # 0) create + unlock an isolated keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -lut 3600 build.keychain            # keep unlocked 1 h
        security unlock-keychain   -p "$KEYCHAIN_PASSWORD" build.keychain
        # put it first in the search path
        security list-keychains -d user -s build.keychain $(security list-keychains -d user | tr -d '"')

        # 1) import + pre-authorise the key for codesign/productbuild/notarytool
        security import cert.p12 -k build.keychain \
          -P "$APPLE_CERTIFICATE_PASSWORD" \
          -T /usr/bin/codesign \
          -T /usr/bin/productbuild \
          -T /usr/bin/xcrun \
          -T /usr/bin/security \
          -A                                         # allow all, or remove for stricter

        # 2) extra ACL for 10.15+
        security set-key-partition-list -S apple-tool:,apple:,codesign: \
          -s -k "$KEYCHAIN_PASSWORD" build.keychain

        security find-identity -v -p codesigning build.keychain | grep "$APPLE_SIGNING_IDENTITY"
      shell: bash

    # ---------- build & codesign ----------
    - name: Build Tauri bundle (signed)
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APPLE_SIGNING_IDENTITY:       ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_CERTIFICATE:            ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD:   ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        TAURI_SIGNING_PRIVATE_KEY:    ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      with:
        releaseId: ${{ needs.create-release.outputs.release_id }}
        args: ${{ matrix.args }}
    
    - name: Collect DMG + ZIP for release
      run: |
        APP_NAME=$(jq -r '.productName' src-tauri/tauri.conf.json)
        mkdir -p dist
        cp -v src-tauri/target/*/release/bundle/dmg/*.dmg dist/
      shell: bash

    - name: Draft GitHub Release with artifacts
      uses: softprops/action-gh-release@v2
      with:
        draft:    true
        tag_name: ${{ github.ref_name }}
        files:    dist/*

    # ---------- clean up ----------
    - name: Delete temporary keychain
      if: always()
      run: security delete-keychain build.keychain