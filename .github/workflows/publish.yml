name: Build o11n

on:
  push:
    branches:
      - main

jobs:
  build-tauri:
    strategy:
      matrix:
        include:
          - args: "--target aarch64-apple-darwin"
            arch: "aarch64-apple-darwin"
            platform: "macos-latest"
          - args: ""
            arch: "windows-latest"
            platform: "windows-latest"
    runs-on: ${{ matrix.platform }}
    env:
      # ——— auto updates & build flags ———
      VITE_UPDATE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RUSTFLAGS: "-C target-cpu=native"

      # ——— signing certs & notarization ———
      APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      APPLE_API_KEY_B64: ${{ secrets.APPLE_P8_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decode Apple ASC API Key
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          KEY_FILE=$(mktemp /tmp/apple_api_key.XXXXXX.p8)
          echo "${{ secrets.APPLE_P8_KEY }}" | base64 --decode > "$KEY_FILE"
          echo "APPLE_API_KEY_PATH=$KEY_FILE" >> $GITHUB_ENV

      # ---------- toolchains ----------
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch == 'aarch64-apple-darwin' && 'aarch64-apple-darwin' || '' }}
          override: true
          default: true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          cache-on-failure: true

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - run: npm ci

      # ---------- build & codesign ----------
      - name: Build Tauri bundle (signed)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: __VERSION__
          releaseName: "o11n v__VERSION__"
          releaseBody: "You know what to do."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      # ───────────────────────────────────────
      # Upload the signed bundles as artifacts
      # ───────────────────────────────────────
      - name: Upload signed bundles
        uses: actions/upload-artifact@v3
        with:
          name: o11n-${{ matrix.platform }}-bundle
          path: src-tauri/target/release/bundle/

  deploy:
    needs: build-tauri
    runs-on: ubuntu-latest
    env:
      AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-2"

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: bundles

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync macOS bundle to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private --delete
          source_dir: bundles/o11n-macos-latest-bundle/src-tauri/target/release/bundle/
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}

      - name: Sync Windows bundle to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private --delete
          source_dir: bundles/o11n-windows-latest-bundle/src-tauri/target/release/bundle/
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
