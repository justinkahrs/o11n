name: macOS release (manual signing)

on: pull_request         # run on every PR pushed to the repo

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - args: '--target aarch64-apple-darwin'
            arch: 'aarch64-apple-darwin'

    env:
      RUSTFLAGS: "-C target-cpu=native"

      # ——— signing cert & keychain ———
      APPLE_CERTIFICATE:            ${{ secrets.APPLE_CERTIFICATE }}
      APPLE_CERTIFICATE_PASSWORD:   ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      KEYCHAIN_PASSWORD:            ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_SIGNING_IDENTITY:       ${{ secrets.APPLE_SIGNING_IDENTITY }}

      # ——— notarisation (ASC API key) ———
      APPLE_API_KEY_B64:            ${{ secrets.APPLE_P8_KEY }}
      APPLE_API_KEY_ID:             ${{ secrets.APPLE_API_KEY }}       
      
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY}}
      APPLE_API_ISSUER:             ${{ secrets.APPLE_API_ISSUER }}       # 8-4-4-4-12 UUID

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # ---------- toolchains ----------
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.arch }}
        override: true

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        cache-on-failure: true

    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - run: npm ci

    # ---------- build & codesign ----------
    - name: Build Tauri bundle (signed)
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APPLE_API_KEY_B64: ${{ secrets.APPLE_P8_KEY}}
        APPLE_SIGNING_IDENTITY:       ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_CERTIFICATE:            ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD:   ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        TAURI_SIGNING_PRIVATE_KEY:    ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      with:
        releaseId: ${{ needs.create-release.outputs.release_id }}
        args: ${{ matrix.args }}
