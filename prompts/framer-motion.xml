<prompt>
    <introduction>
        Conceptual roadmap for a Framer Motion scroll-activated site, including best practices, code
        snippets, and performance/accessibility considerations.
    </introduction>
    <section index="1">
        <title>Scroll Tracking with useScroll and useTransform</title>
        <useCase>Animate elements based on scroll progress (0 to 1).</useCase>
        <example>
            <![CDATA[
            import React from 'react';
            import { motion, useScroll, useTransform } from 'framer-motion';

            function ScrollTrackingSection() {
              // 1. Hook into scroll to get a normalized scrollYProgress (0 – 1)
              const { scrollYProgress } = useScroll();

              // 2. Map scroll progress to different animation values
              const opacity = useTransform(scrollYProgress, [0, 0.5, 1], [0, 1, 0]);
              const scale = useTransform(scrollYProgress, [0, 1], [0.8, 1.2]);
              const x = useTransform(scrollYProgress, [0, 1], ['-50%', '50%']);

              return (
                <section style={{ height: '200vh' }}>
                  <motion.div
                    style={{
                      opacity,
                      scale,
                      x,
                      width: 200,
                      height: 200,
                      margin: '0 auto',
                      background: '#09f',
                    }}
                  />
                </section>
              );
            }

            export default ScrollTrackingSection;
            ]]>
        </example>
        <bestPracticesAndPitfalls>
            <item>Performance: useScroll updates on every scroll. Keep transforms light
                (GPU-friendly).</item>
            <item>Ranges: Ensure matching input/output array lengths in useTransform.</item>
            <item>Avoid complex mappings: For advanced logic, chain useTransforms or use a function.</item>
        </bestPracticesAndPitfalls>
    </section>
    <section index="2">
        <title>Viewport Detection with useInView</title>
        <useCase>Trigger or stagger animations when elements come into view.</useCase>
        <example>
            <![CDATA[
            import React, { useRef } from 'react';
            import { motion, useInView } from 'framer-motion';

            function ViewportDetectionSection() {
              const ref = useRef(null);
              const isInView = useInView(ref, { margin: '-100px' }); 
              // margin (rootMargin) can help start the detection earlier/later

              return (
                <div style={{ height: '150vh' }}>
                  {/* Scroll until this ref enters viewport */}
                  <motion.div
                    ref={ref}
                    initial={{ opacity: 0, y: 50 }}
                    animate={isInView ? { opacity: 1, y: 0 } : {}}
                    transition={{ duration: 0.5, delay: 0.2 }}
                    style={{ background: '#f90', padding: '2rem', marginTop: '100vh' }}
                  >
                    <h2>I fade in when in view</h2>
                  </motion.div>
                </div>
              );
            }

            export default ViewportDetectionSection;
            ]]>
        </example>
        <bestPracticesAndPitfalls>
            <item>Stagger: For multiple items, use variants or a parent with staggerChildren.</item>
            <item>rootMargin: Adjust threshold/margin for timing.</item>
            <item>Performance: IntersectionObserver is efficient but limit observed elements.</item>
        </bestPracticesAndPitfalls>
    </section>
    <section index="3">
        <title>Smooth Transitions with Custom Easings or Springs</title>
        <useCase>Use spring dynamics or custom bezier curves for more organic transitions.</useCase>
        <example>
            <![CDATA[
            import React from 'react';
            import { motion } from 'framer-motion';

            function SmoothTransitions() {
              const springConfig = {
                type: 'spring',
                stiffness: 200,
                damping: 20,
              };

              const easeConfig = [0.6, 0.01, -0.05, 0.95];

              return (
                <div style={{ display: 'flex', gap: '2rem' }}>
                  {/* Spring-based transition */}
                  <motion.div
                    style={{ background: '#0af', width: 100, height: 100 }}
                    whileHover={{ scale: 1.2 }}
                    transition={springConfig}
                  />

                  {/* Custom easing with cubic bezier */}
                  <motion.div
                    style={{ background: '#fa0', width: 100, height: 100 }}
                    whileHover={{ scale: 1.2 }}
                    transition={{ duration: 0.4, ease: easeConfig }}
                  />
                </div>
              );
            }

            export default SmoothTransitions;
            ]]>
        </example>
        <bestPracticesAndPitfalls>
            <item>Spring vs. Tween: Springs can overshoot/bounce; tweens have set durations.</item>
            <item>Motion Design: Keep transitions ~0.3–0.5s for snappiness.</item>
            <item>Global Defaults: Define default transitions for reuse.</item>
        </bestPracticesAndPitfalls>
    </section>
    <section index="4">
        <title>Sticky Sections with CSS position: sticky</title>
        <useCase>Pin sections/elements while scrolling (hero sections, scrollytelling).</useCase>
        <example>
            <![CDATA[
            import React from 'react';
            import { motion } from 'framer-motion';

            function StickySection() {
              return (
                <section style={{ height: '300vh', background: '#eee' }}>
                  <motion.div
                    style={{
                      position: 'sticky',
                      top: 0,
                      height: '100vh',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      background: '#333',
                      color: '#fff',
                      fontSize: '2rem',
                    }}
                  >
                    <h1>Sticky Section</h1>
                  </motion.div>
                </section>
              );
            }

            export default StickySection;
            ]]>
        </example>
        <bestPracticesAndPitfalls>
            <item>Browser Support: position: sticky is broadly supported; confirm older browser
                needs.</item>
            <item>Parent Overflow: overflow: hidden/auto can break sticky.</item>
            <item>Combine Animations: Pin container, animate children with transforms.</item>
        </bestPracticesAndPitfalls>
    </section>
    <section index="5">
        <title>Text Splitting (Lines or Words)</title>
        <useCase>Animate text by lines/words, re-splitting on resize to keep line consistency.</useCase>
        <example>
            <![CDATA[
            import React, { useEffect, useState, useCallback } from 'react';
            import { motion } from 'framer-motion';

            function AnimatedText({ text }: { text: string }) {
              const [lines, setLines] = useState<string[]>([]);

              const splitText = useCallback(() => {
                // A simplistic approach: measure container width and try splitting
                // Real-world solutions often use a text-splitting library or
                // measure lines with a hidden element.
                // For demonstration, we’ll just split by words here:
                setLines(text.split(' '));
              }, [text]);

              useEffect(() => {
                splitText();
                // Re-split on window resize
                window.addEventListener('resize', splitText);
                return () => window.removeEventListener('resize', splitText);
              }, [splitText]);

              return (
                <div>
                  {lines.map((word, index) => (
                    <motion.span
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                      style={{ display: 'inline-block', marginRight: 4 }}
                    >
                      {word}
                    </motion.span>
                  ))}
                </div>
              );
            }

            export default AnimatedText;
            ]]>
        </example>
        <bestPracticesAndPitfalls>
            <item>Re-splitting: Check line breaks on resize/font changes to avoid mid-word splits.</item>
            <item>Performance: Text splitting can be heavy; debounce or throttle if needed.</item>
            <item>SEO & Accessibility: Maintain logical reading order and semantics.</item>
        </bestPracticesAndPitfalls>
    </section>
    <section index="6">
        <title>Math Mapping &amp; Lerp (Linear Interpolation)</title>
        <useCase>Combine useTransform with math-based remapping or pointer tracking.</useCase>
        <example>
            <![CDATA[
            import React, { useState, useEffect } from 'react';
            import { motion, useMotionValue, useTransform } from 'framer-motion';

            function PointerFollow() {
              const mouseX = useMotionValue(0);
              const [pointer, setPointer] = useState({ x: 0, y: 0 });

              // On mouse move, capture coordinates
              useEffect(() => {
                const handleMouseMove = (e: MouseEvent) => {
                  setPointer({ x: e.clientX, y: e.clientY });
                };
                window.addEventListener('mousemove', handleMouseMove);
                return () => window.removeEventListener('mousemove', handleMouseMove);
              }, []);

              // LERP style (basic approach)
              useEffect(() => {
                const animationFrame = requestAnimationFrame(() => {
                  const current = mouseX.get();
                  const newX = current + 0.1 * (pointer.x - current); // LERP
                  mouseX.set(newX);
                });

                return () => cancelAnimationFrame(animationFrame);
              });

              // We can create a transform that references mouseX
              const rotate = useTransform(mouseX, [0, window.innerWidth], [-45, 45]);

              return (
                <motion.div
                  style={{
                    position: 'absolute',
                    top: '50%',
                    x: mouseX, // direct usage
                    rotate,
                    background: '#0af',
                    width: 50,
                    height: 50,
                    borderRadius: '50%',
                  }}
                />
              );
            }

            export default PointerFollow;
            ]]>
        </example>
        <bestPracticesAndPitfalls>
            <item>Request Animation Frame: Use requestAnimationFrame/useAnimationFrame to avoid too
                many re-renders.</item>
            <item>Bounds: Clamp or wrap values as needed.</item>
            <item>Mobile: Pointer effects can impact performance; test or disable for small screens.</item>
        </bestPracticesAndPitfalls>
    </section>
    <performance>
        <item>Fewer, Larger Motion Blocks: Combine elements into a parent &lt;motion.div&gt;.</item>
        <item>Use GPU-Friendly CSS: Animate transform/opacity to avoid layout thrashing.</item>
        <item>Throttling &amp; Debouncing: Limit updates for resize or mouse moves.</item>
        <item>Memoization: Use useMemo/useCallback for expensive logic.</item>
        <item>IntersectionObserver: useInView instead of manual scroll event listeners.</item>
    </performance>
    <accessibilityConsiderations>
        <item>Reduced Motion: Respect prefers-reduced-motion with shouldReduceMotion.</item>
        <codeSnippet>
            <![CDATA[
            import { useReducedMotion } from 'framer-motion';

            const shouldReduceMotion = useReducedMotion();

            // Then avoid or shorten animations
            transition={shouldReduceMotion ? { duration: 0 } : { duration: 0.5 }}
            ]]>
        </codeSnippet>
        <item>Keyboard Navigation &amp; Focus: Keep tabIndex/focus outlines intact.</item>
        <item>Color Contrast: Maintain accessible contrast.</item>
        <item>Semantic Structure: Keep correct reading order even if text is split.</item>
    </accessibilityConsiderations>
    <combinedExample>
        <description>Example combining sticky sections, scroll tracking, and fade-in on view.</description>
        <code>
            <![CDATA[
            import React from 'react';
            import { motion, useScroll, useTransform, useInView } from 'framer-motion';

            function CombinedExample() {
              const { scrollYProgress } = useScroll();
              const scale = useTransform(scrollYProgress, [0, 1], [1, 2]);

              const ref = React.useRef<HTMLDivElement>(null);
              const isInView = useInView(ref);

              return (
                <main style={{ overflowX: 'hidden' }}>
                  {/* Sticky Section */}
                  <section style={{ height: '150vh', position: 'relative' }}>
                    <motion.div
                      style={{
                        position: 'sticky',
                        top: 0,
                        height: '100vh',
                        background: '#333',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                      }}
                    >
                      <motion.h1 style={{ scale, color: '#fff' }}>
                        Scroll-Activated Scaling Text
                      </motion.h1>
                    </motion.div>
                  </section>

                  {/* Viewport-Triggered Section */}
                  <motion.section
                    ref={ref}
                    style={{ height: '100vh', background: '#eee', display: 'flex', alignItems: 'center', justifyContent: 'center' }}
                    initial={{ opacity: 0, y: 50 }}
                    animate={isInView ? { opacity: 1, y: 0 } : {}}
                    transition={{ duration: 0.5 }}
                  >
                    <h2>Fades In On View</h2>
                  </motion.section>
                </main>
              );
            }

            export default CombinedExample;
            ]]>
        </code>
        <explanation>
            1. Sticky: The first &lt;section&gt; pins text.
            2. Scroll Tracking: scrollYProgress scales the heading.
            3. Viewport Detection: The second &lt;section&gt; uses useInView to fade in.
        </explanation>
    </combinedExample>
    <finalThoughts>
        <item>Start small to confirm performance and correctness.</item>
        <item>Profile early for heavy animations or large images.</item>
        <item>Test accessibility, including prefers-reduced-motion.</item>
    </finalThoughts>
</prompt>