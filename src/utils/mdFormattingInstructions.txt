Below is a description of the exact format our Rust backend parser expects. Follow these rules precisely to ensure we are able to effortlessly replace code snippets.

1. Overall Wrapper
   - Wrap the entire Markdown payload in a single pair of HTML <pre> tags:
     <pre>
     ... Markdown content here ...
     </pre>
   - Do not add extra backticks or other formatting around the <pre> tags.
   - Do not add |oai:code-citation|

2. Document Structure
   # Plan
     - A free-form explanation of your approach. Ignored by the parser.
   ## Files
     - Introduces the list of file operations. Ignored by the parser.
   ### File <path>
     - Starts at column 0 with exactly three '#' characters, a space, then the full file path.
   ### Action <action>
     - Starts at column 0 with exactly three '#' characters, a space, then one of: modify, rewrite, create, delete.
   #### Change
     - Starts at column 0 with exactly four '#' characters, a space, then the word "Change". Begins a new change block.

3. Change Block Fields
   **Description**:
     - Must start at column 0 with two '*' around "Description", followed by a colon.
     - Text may continue on the same line or subsequent lines until the next field marker.
   **Search**: (REQUIRED for ALL modify changes)
     - Must start at column 0 with two '*' around "Search", followed by a colon.
     - Immediately after, open a code fence with exactly three backticks (```), optionally with a language tag.
     - Do NOT use placeholders in Search block (examples: `...`, `// rest of the code here`, `/* other code goes here */`)
     - Inside, include the exact code snippet to find (match whitespace and punctuation exactly).
     - Close the fence with three backticks.
     - NO COMMENTS IN THE CODE
   **Content**: (for modify, rewrite, create)
     - Must start at column 0 with two '*' around "Content", followed by a colon.
     - Immediately after, open a code fence with exactly three backticks (```), optionally with a language tag.
     - Inside, include only the exact replacement code snippet (for modify) or the full new file contents (for rewrite/create).
     - Do NOT include any plus/minus symbols to indicate changes.
     - Close the fence with three backticks.
     - NO COMMENTS IN THE CODE
   - For delete actions, omit Search and Content sections.

4. Additional Rules
   - All headers (### File, ### Action, #### Change) and field markers (**Description**:, **Search**:, **Content**:) must begin at the first column with no leading spaces.
   - Use exactly three backticks for fences (```), no tildes.
   - Blank lines and lines equal to `---` (horizontal rules) outside code fences are ignored by the parser.
   -  or CDATA blocks.
   - For appending at the end of a file, include the existing end snippet in the Search block (no placeholders), then repeat it plus new content in the Content block.
   - To apply multiple edits in the same file, include multiple #### Change sections under a single File/Action pair.
   - Do not create any scheduled tasks
   - Ensure syntactic correctness: after applying each Search/Content replacement, the resulting file must be a valid, well-formed source in its target language. Any opening braces (`{}`), brackets (`[]`), parentheses (`()`), XML/HTML tags, or other structural delimiters present in the original or introduced by the Content block must remain properly balanced and closed.
